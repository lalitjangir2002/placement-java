//q1(fist and last occurence)
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=-1;
        int low=0;
        int high=nums.length-1;
        int last=-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                first=mid;
                high=mid-1;

            }
            else if(nums[mid]<target)
            {
                low=mid+1;
            }
            else high=mid-1;
        }
        low=0;
        high=nums.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                last=mid;
                low=mid+1;

            }
            else if(nums[mid]<target)
            {
                low=mid+1;
            }
            else high=mid-1;
        }
        return new int[] {first,last};
    }
}

//q2(search in rotated sorted array)
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                return mid;
            }

            //left sorted
            if(nums[low]<=nums[mid])
            {
                if(nums[low]<=target && target <=nums[mid])
                {
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            //right sorted
            else{
                if(nums[mid]<=target && target <=nums[high])
                {
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return -1;
    }
}

//q3(minimum no of days to make m bouquets)
class Solution {
    public static boolean possible(int arr[],long day,int m,int k)
    {    int cnt=0;
    int boq=0;
        for(int i=0;i<arr.length;i++)
        { 
            if(arr[i]<=day)
            {
                cnt++;
            }
            else{
                boq+=(cnt/k);
                cnt=0;
            }
              
        }
        boq+=(cnt/k);
        if(boq>=m)
        {
            return true;
        }
        return false;
    }
    public int minDays(int[] bloomDay, int m, int k) {
        
         int n=bloomDay.length;
         int min=Integer.MAX_VALUE;
          int  max=Integer.MIN_VALUE;
        int ans=0;
        for(int i=0;i<n;i++)
        {
            min=Math.min(min,bloomDay[i]);
            max=Math.max(max,bloomDay[i]);
        }
        long x=(long)m*k;
        if(n<x)
        {
            return -1;
        }
        else{
             int low=min;
             int high=max;
             while(low<=high)
             { int mid=low+(high-low)/2;
                 if(possible(bloomDay,mid,m,k))
                 {
                     ans=mid;
                     high=mid-1;
                 }
                 else{
                     low=mid+1;
                 }
             }
        }
        return ans;
    }
}

//q4(missing element in sorted array)
import java.io.*;
class MissingNumberFinder {
    static int findMissingNumber(int sortedArray[], int size) {
        // Extreme cases
        if (sortedArray[0] != 1)
            return 1;
        if (sortedArray[size - 1] != (size + 1))
            return size + 1;

        int low = 0, high = size - 1;
        int mid = 0;
        while ((high - low) > 1) {
            mid = (low + high) / 2;
            if ((sortedArray[low] - low) != (sortedArray[mid] - mid))
                high = mid;
            else if ((sortedArray[high] - high) != (sortedArray[mid] - mid))
                low = mid;
        }
        return (sortedArray[low] + 1);
    }
    public static void main(String[] args) {
        int sortedArray[] = { 1, 2, 3, 4, 5, 6, 8 };
        int size = sortedArray.length;
        System.out.println("Missing number: " + findMissingNumber(sortedArray, size));
    }
}

//q5(peak element)
class Solution {
    public int findPeakElement(int[] nums) {
      int n=nums.length;
      if(n==1) return 0;
      if(nums[0]>nums[1]) return 0;
      if(nums[n-1]>nums[n-2]) return n-1;
      int low=1;
      int high=n-2;
      while(low<=high)
      {
          int mid=low+(high-low)/2;
          if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1])
          {
              return mid;
          }
          else if(nums[mid]>nums[mid-1])
          {
              //increasing curve
              low=mid+1;
          }
          else{
              high=mid-1; // for decreasing curve and dips
          }
      }
      return -1;
    }
}
