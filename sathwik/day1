//Q1
public static int countAnagrams(String s, String p)
    {
        // change CHARACTERS to support range of supported
        // characters
        int CHARACTERS = 256;
        int sn = s.length();
        int pn = p.length();
        int count = 0;
        if (sn < 0 || pn < 0 || sn < pn)
            return 0;
 
        char[] pArr = new char[CHARACTERS];
        char[] sArr = new char[CHARACTERS];
        int i = 0;
        // till window size
        for (; i < pn; i++) {
            sArr[CHARACTERS - s.charAt(i)]++;
            pArr[CHARACTERS - p.charAt(i)]++;
        }
        if (Arrays.equals(pArr, sArr))
            count += 1;
        // next window
        for (; i < sn; i++) {
            sArr[CHARACTERS - s.charAt(i)]++;
            sArr[CHARACTERS - s.charAt(i - pn)]--;
 
            if (Arrays.equals(pArr, sArr))
                count += 1;
        }
        return count;
    }
//q2
Q2)class Solution {
    public int maxFrequency(int[] nums, int k) {
        int maxFrequency = 0;
        long currentSum = 0;
        Arrays.sort(nums); 
        for (int left = 0, right = 0; right < nums.length; ++right) {
            currentSum += nums[right];
            while (currentSum + k < (long) nums[right] * (right - left + 1)) {
                currentSum -= nums[left]; 
                left++;
            }
            maxFrequency = Math.max(maxFrequency, right - left + 1);
        }
        return maxFrequency;
    }
}
//q3
Q3)class Solution {
    public int minimumRecolors(String blocks, int k) {
        int i=0,j=0,count=0;
        int max=Integer.MAX_VALUE;
        while(i<blocks.length()){
            if(blocks.charAt(i)=='W') count++;
            if(i-j+1==k){
                max=Math.min(count,max);
                if(blocks.charAt(j)=='W') count--;
                j++;
            }
             i++;
           
        }
        return max;
    }
}
//q4
class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        char [][] board = new char[n][n];
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board.length; j++) {
                board[i][j] = '.';
            }
        }
        
        List<List<String>> ans = new ArrayList<>();
        queen(board, 0, ans);
        return ans;
    }

    static void queen(char[][] board, int row, List<List<String>> list) {

        if(row == board.length) {

            list.add(construct(board));
            return;
        }

        for (int col = 0; col < board.length; col++) {
            if(isSafe(board, row, col)) {
                board[row][col] = 'Q';
                queen(board, row + 1, list);
                board[row][col] = '.';
            }
        }
    }

    static List<String> construct(char[][] board) {

        List<String> internal = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            String row = new String(board[i]);
            internal.add(row);
        }
        return internal;
    }

    static boolean isSafe(char[][] board, int row, int col) {

        //for checking vertical row
        for (int i = 0; i < row; i++) {
            if(board[i][col] == 'Q') {
                return false;
            }
        }

        //for checking left diagonal

        int maxLeft = Math.min(row, col);

        for (int i = 1; i <= maxLeft; i++) {
            if(board[row - i][col - i] == 'Q') {
                return false;
            }
        }

        //for checking right diagonal

        int maxRight = Math.min(row, board.length - 1 - col);

        for (int i = 1; i <= maxRight; i++) {
            if(board[row - i][col + i] == 'Q') {
                return false;
            }
        }

        return true;
    }
}
//q6
class Solution {
    private boolean solveRec(char[][] board){
        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){

                if(board[i][j] == '.'){
                    for(char ch='1'; ch<='9'; ch++){
                        if(isValid(board, i, j, ch)){
                            board[i][j] = ch;

                            // Backtracking Portion According to Condition
                            if(solveRec(board)) return true;
                            else board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isValid(char[][] board, int row, int col, char ch){
        for(int i=0; i<9; i++){
            if(board[i][col] == ch){ //Checks Entire Column
                return false;
            }
            if(board[row][i] == ch){ // Checks Entire Row
                return false;
            }
            if(board[3*(row/3) + (i/3)][3*(col/3) + (i%3)] == ch){ // Checks 3*3 Matrix
                return false;
            }
        }
        return true;
    }



    public void solveSudoku(char[][] board) {
        solveRec(board);
    }
}
