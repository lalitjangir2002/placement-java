q7
class Solution {
    private void backtrack(String num, int target, List<String> list, int idx, String current, long sum, long prev) {
    // Base case
    if (idx == num.length()) {
        if (target == sum) {
            list.add(current);
            return;
        }
    }

    for (int i = idx; i < num.length(); i++) {
        if (i != idx && num.charAt(idx) == '0') break;
        long cur = Long.parseLong(num.substring(idx, i + 1));
        if (idx == 0) {
            backtrack(num, target, list, i + 1, current + cur, cur, cur);
        } else {
            backtrack(num, target, list, i + 1, current + "+" + cur, sum + cur, cur);
            backtrack(num, target, list, i + 1, current + "-" + cur, sum - cur, -cur);
            backtrack(num, target, list, i + 1, current + "*" + cur, sum - prev + (prev * cur), prev * cur);
        }
    }
}
    public List<String> addOperators(String num, int target) {
        List<String> list = new ArrayList<>();
        backtrack(num,target,list,0,"",0,0);
        return list;
    }
}
q6
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {
    TreeSet<Integer> set = new TreeSet<>();

    for(int i = 0;i<nums.length;i++){
        Integer smaller = set.floor(nums[i]);
        Integer larger = set.ceiling(nums[i]);

        if(smaller != null && nums[i]-smaller <= valueDiff){
            return true;
        }

        if(larger != null && larger - nums[i] <= valueDiff){
            return true;
        }
        set.add(nums[i]);

        if(set.size() > indexDiff){
            set.remove(nums[i-indexDiff]);
        }
    }
    return false;
    }
}
q5
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        int n = nums.length;

        for(int i = 0;i<n;i++){
            if(!map.containsKey(nums[i])){
            map.put(nums[i],i);
            }else{
                int prevInd = map.get(nums[i]);
                if(Math.abs(i-prevInd) <= k){
                    return true;
                }else{
                    map.put(nums[i],i);
                }
            }
        }
            return false;
    }
}
q4
class Solution {
    public int maxConsecutiveAnswers(String answerKey, int k, char targetChar) {
        int left = 0;
        int right = 0;
        int n = answerKey.length();
        int count = 0;
        int ans = 0;

        while (right < n) {
            if (answerKey.charAt(right) == targetChar) {
                count++;
            }

            while (count > k) {
                if (answerKey.charAt(left) == targetChar) {
                    count--;
                }
                left++;
            }
            ans = Math.max(ans, right - left + 1);
            right++;
        }

        return ans;
    }

    public int maxConsecutiveAnswers(String answerKey, int k) {
        int maxConsecutiveT = maxConsecutiveAnswers(answerKey, k, 'T');
        int maxConsecutiveF = maxConsecutiveAnswers(answerKey, k, 'F');

        return Math.max(maxConsecutiveT, maxConsecutiveF);
    }
}
q3
class Solution {
    public int longestOnes(int[] nums, int k) {
        int count = 0;
        int n = nums.length;
        int left = 0,right = 0;
        int ans = 0;

        while(right < n){
            if(nums[right] == 0){
                count++;
            }
            
            // for maintaining window size
            while(count>k){
                if(nums[left] == 0){
                    count--;
                }
                left++;
            }
            ans = Math.max(ans,right-left+1);
            right++;
        }
        return ans;
    }
}
q2
class Solution {
    public int totalFruit(int[] fruits) {
        Map<Integer,Integer> basket = new HashMap<>();
        
        //taking two pointers
        int left = 0;
        int right = 0;
        int ans = 0;

        for(right = 0;right <fruits.length;right++){
            int currentFruits = basket.getOrDefault(fruits[right],0);
            basket.put(fruits[right],currentFruits+1);

            //as if basket have more than 2 types of fruits 
            //starting emptying it
            while(basket.size()>2){
                int fruitsCount = basket.get(fruits[left]);
                if(fruitsCount == 1){
                    basket.remove(fruits[left]);
                    left++;
                }else{
                    basket.put(fruits[left],fruitsCount - 1);
                    left++;
                }
            }
            ans = Math.max(ans,right-left+1);
        }
        return ans;
    }
}
q1
class Solution {
    public int longestSubarray(int[] nums) {
        int current = 0,prev = 0;
        int ans = 0;

        for(int i = 0;i<nums.length;i++){
            if(nums[i] == 1){
                current++;
            }else{//when we encounter 0
                ans = Math.max(ans,current+prev);
                prev = current;
                current = 0;
            }
        }
        //corner cases
        ans = Math.max(ans,current+prev);
        if(ans == nums.length){
            return ans-1;
        }
        return ans;
 
