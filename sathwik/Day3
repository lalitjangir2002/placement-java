//q4//
int search(int ar[], int size)

    {

        // Extreme cases

        if (ar[0] != 1)

            return 1;

        if (ar[size - 1] != (size + 1))

            return size + 1;
 

        int a = 0, b = size - 1;

        int mid = 0;

        while ((b - a) > 1) {

            mid = (a + b) / 2;

            if ((ar[a] - a) != (ar[mid] - mid))

                b = mid;

            else if ((ar[b] - b) != (ar[mid] - mid))

                a = mid;

        }

        return (ar[a] + 1);

    }
//q3//class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int s = min(bloomDay), e = (int)1e9, ans = -1;
        while(s <= e) {
            int mid = s + (e - s) / 2;
            if(completable(bloomDay, mid, m, k)) {
                ans = mid;
                e = mid - 1;
            } else s = mid + 1;
        }
        return ans;
    }
    
    public static boolean completable(int[] arr, int nod, int nob, int nof) {
       int k = 0, m = 0;
       for(int i : arr) {
           if(i <= nod) {
               k ++;
               if(k == nof) {
                   m++;
                   k = 0;    
               }
           } else k = 0;
       }
        return m >= nob;
    }
    
    public int min(int[] wts) {
        int min = wts[0];
        for(int i : wts) if(i < min) min = i;
        return min;
    }
}
//q5//class Solution {
    public int findPeakElement(int[] arr) {
        int n = arr.length;
        int low=0, high=n-1,mid;
        if(n==1){
            return 0;
        }

        if(arr[low]>arr[low+1]){ 
            return low;
        }
        else if(arr[high]>arr[high-1]){
            return high; 
        }
        else{
            low++;
            high--;
        }
    
        while(low<=high){
            mid = (low+high)/2;
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){
                return mid;
            }
            else if(arr[mid-1]>arr[mid]){
                if(arr[mid+1]>arr[mid] && arr[mid+1]!=arr[mid-1]){
                    return mid+1;
                }
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return -1;
    }
}
//q2//class Solution {
    public int search(int[] nums, int target) {
       int n = nums.length;
        int l = 0;
        int r = n  - 1;

        while(l <= r) {
            int mid = (l + r) / 2;

            if(nums[mid] == target) {
                return mid;
            }

            // checks if we are in the left side of sorted array
            if(nums[l] <= nums[mid]) { 

                // combined both the logic
                if(target > nums[mid] || target < nums[l]) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            } 
            // checks if we are in the right side of sorted array
            else {
                if(target < nums[mid] || target > nums[r]) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            } 
        }
        return -1;      
    }
}
//q1//class Solution {
    public int[] searchRange(int[] nums, int k) {
        int fu=-1,lu=-1;
        int s=0,e=nums.length-1;
        while(s<=e){
            int m=s+(e-s)/2;
            if(nums[m]==k){
                fu=m;
                e=m-1;
            }
          else  if(nums[m]<k){
                s=m+1;
            }
            else e=m-1;
        }
        s=0;e=nums.length-1;
         while(s<=e){
            int m=s+(e-s)/2;
            if(nums[m]==k){
                lu=m;
                s=m+1;
            }
          else  if(nums[m]<k){
                s=m+1;
            }
            else e=m-1;
        }
        return new int[]{fu,lu};
    }
}
